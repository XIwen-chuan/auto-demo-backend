{
  "identity": "pex-1843",
  "title": "<p>Prediction of intercellular communication networks using CellComm</p>",
  "content": [
    {
      "header": "Introduction",
      "content": ""
    },
    {
      "header": "Reagents",
      "content": ""
    },
    {
      "header": "Equipment",
      "content": ""
    },
    {
      "header": "Procedure",
      "content": "<p># Data</p><p>We applied CellComm to Spatial Transcriptomics data generated using the 10X Visium technology. This dataset was obtained from the article <em>Multimodal Analysis of Composition and Spatial Architecture in Human Squamous Cell Carcinoma</em>&nbsp;(<em>Cell</em>&nbsp;182, 1661\u20131662) published by Andrew Ji and collaborators in 2020. This dataset profiled/analyzed the tumor and tumor microenvironment (TME) of cutaneous squamous cell carcinoma (cSCC). In summary, this work identified a tumor-specific keratinocyte (TSK) population that interacts with a fibrovascular niche.</p><p>&nbsp;</p><p># Before starting...</p><p>More information about CellComm and additional tutorials can be found in https://github.com/edroaldo/fusca</p><p><br></p><p>Before you start you should create a folder for your analyses. It must contain the folders <em>filtered_feature_bc_matrix</em>&nbsp;(containing the files matrix.mtx.gz, barcodes.tsv.gz and features.tsv.gz), <em>spatial</em>&nbsp;(containing the files aligned_fiducials. jpg, detected_tissue_image.jpg, scalefactors_json.json, tissue_hires_image.png, tissue_lowres_image.png and tissue_positions_list.csv) and a folder where the results (especially the figures) will be stored (here we called <em>results</em>).</p><p>The files contained in folders <em>filtered_feature_bc_matrix</em>&nbsp;and <em>spatial</em>&nbsp;are the outputs of Visium 10X technology and, therefore, it is possible to analyze any Visium 10X dataset.</p><p>&nbsp;</p><p>1. Install <em>fusca</em>&nbsp;package - Framework for Unified Single-Cell Analysis.</p><p>&nbsp;</p><p># Code:</p><p>install.packages(\"devtools\")</p><p>library(\"devtools\")</p><p>devtools::install_github(\"edroaldo/fusca\")</p><p>&nbsp;</p><p>2. Load libraries.</p><p>&nbsp;</p><p># Code:</p><p>library(\"dplyr\")</p><p>library(\"fusca\")</p><p>library(\"igraph\")</p><p>library(\"scales\")</p><p>library(\"ggplot2\")</p><p>&nbsp;</p><p>3.&nbsp;Set the 1 - working directory as your analysis folder and 2 - base directory as your results folder.</p><p>&nbsp;</p><p># Code</p><p>setwd(\"/workspace/Edroaldo/CellComm\")</p><p>bd &lt;- \"results\"</p><p>&nbsp;</p><p><br></p><p>4. Create a CellRouter object containing expression and image information from ST data.</p><p>&nbsp;</p><p>Here we use the function <em>read10X</em>&nbsp;to read or organize the objects in folder <em>filtered_feature_bc_matrix</em>. Then we create the CellRouter object using the <em>CreateCellRouter</em>&nbsp;function and add the tissue image and data related to it using the <em>read10XImage</em>&nbsp;function.</p><p>&nbsp;</p><p>Used parameters the <em>CreateCellRouter</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- min.genes = 100, defining the minimum number of genes that a cell must express to be considered.</p><p>- min.cells = 25, defining the minimum number of cells that a gene is expressed (*counts* &gt; 0) to be considered.</p><p>- is.expr = 0, defining the minimum expression value (*counts*) a gene must have to be considered expressed.</p><p>&nbsp;</p><p>Used parameters the <em>read10XImage</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>&nbsp;</p><p># Code:</p><p>sample_names &lt;- c(\"Sample1\")</p><p>data &lt;- read10X(\"filtered_feature_bc_matrix/\")</p><p>image_paths&nbsp;&lt;- c(\"spatial/tissue_lowres_image.png\")</p><p>scalefactor_paths &lt;- c(\"spatial/scalefactors_json.json\")</p><p>tissue_paths &lt;- c(\"spatial/tissue_positions_list.csv\")</p><p>cellrouter &lt;- CreateCellRouter(data, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min.genes = 100, min.cells = 25, is.expr = 0)</p><p>cellrouter &lt;- read10XImage(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sample_names, image_paths, scalefactor_paths, tissue_paths)</p><p>&nbsp;</p><p>5. Preprocess the expression data.</p><p>&nbsp;</p><p>Here we use the function <em>FindVariableGenes</em>&nbsp;to identify the genes with the highest variance of expression, normalize and scale the expression data using the <em>Normalize</em>&nbsp;and <em>scaleData</em>&nbsp;functions and, for the last (<em>scaleData</em>), we use the 3000 most variable genes.</p><p>&nbsp;</p><p>Used parameters the <em>FindVariableGenes</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- method = \"coefficient_variation\", defining the method for the identification of the most variable genes</p><p>- pvalue = \"0.05\", defining the *p*-value threshold for the considered genes.</p><p>&nbsp;</p><p>Used parameters the <em>Normalize</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>&nbsp;</p><p>Used parameters the <em>ScaleData</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- genes.use = character, defining the genes to center/scale. Here we used the 3000 most variable genes.</p><p>- blocksize = numeric, defining the size of the blocks in which genes will be scaled.</p><p>&nbsp;</p><p># Code:</p><p>var.genes &lt;- FindVariableGenes(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method = \"coefficient_variation\", pvalue = 0.05)</p><p>var.genes &lt;- var.genes[order(var.genes$adj.pvalue, decreasing = FALSE), ]</p><p>cellrouter@var.genes &lt;- rownames(var.genes[1:3000, ])</p><p>cellrouter &lt;- Normalize(cellrouter, assay.type = \"ST\")</p><p>cellrouter &lt;- scaleData(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genes.use = cellrouter@var.genes, blocksize = nrow(cellrouter@assays$ST@ndata))</p><p>&nbsp;</p><p>6. Dimensionality reduction and clustering.</p><p>&nbsp;</p><p>Then we reduce the dimensionality of the data using linear methods, with Principal Component Analysis (PCA) using the <em>computePCA</em>&nbsp;function and non-linear methods, with the t-Distributed Stochastic Neighbor Embedding (t-SNE) using the <em>computeTSNE</em>&nbsp;function and the Uniform Manifold Approximation and Projection (UMAP) using the <em>computeUMAP</em>&nbsp;function. As a next step we identified transcriptional clusters using the <em>findClusters</em>&nbsp;function.</p><p>&nbsp;</p><p>Used parameters the <em>computePCA</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- seed = X, sets the seed of R\u2018s random number generator, which is useful for creating simulations or random objects/analysis that can be reproduced.</p><p>- num.pcs = 50, defining the number of principal components to compute.</p><p>- genes.use = character; defining the genes to compute the PCA. Here we used the 3000 most variable genes.</p><p>&nbsp;</p><p>Used parameters the <em>computeTSNE</em>&nbsp;function:</p><p>- seed = X, sets the seed of R\u2018s random number generator, which is useful for creating simulations or random objects/analysis that can be reproduced.</p><p>- num.pcs = 8, defining the number of principal components to use in the tSNE calculation.</p><p>&nbsp;</p><p>Used parameters the <em>computeUMAP</em>&nbsp;function:</p><p>- seed = X, sets the seed of R\u2018s random number generator, which is useful for creating simulations or random objects/analysis that can be reproduced.</p><p>- num.pcs = 8, defining the number of principal components to use in the UMAP calcularion.</p><p>- metric = \"euclidean\", defining the distances between data points to compute.</p><p>- n_neighbors = 15, defining the number of nearest neighbors.</p><p>- spread = 1, defining the effective scale of embedded points.</p><p>- min_dist = 0.1, defining how close the points appear in the final layout.</p><p>&nbsp;</p><p>Used parameters the <em>findClusters</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- num.pcs = 8, defining the number of principal components to use for clustering</p><p>- nn.type = \"knn\", defining the method to find the *k*-nearest neighbors graph.</p><p>- k = 20, defining the number of nearest neighbors to build a *k*-nearest neighbors graph.</p><p>&nbsp;</p><p># Code:</p><p>cellrouter &lt;- computePCA(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed = 42, num.pcs = 50, genes.use = cellrouter@var.genes)</p><p>plot(cellrouter@pca$sdev)</p><p>cellrouter &lt;- computeTSNE(cellrouter,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed = 1, num.pcs = 8, max_iter = 1000)</p><p>cellrouter &lt;- computeUMAP(cellrouter,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seed = 1, num.pcs = 8, metric = \"euclidean\", n_neighbors = 15, spread = 1, min_dist = 0.1)</p><p>cellrouter &lt;- findClusters(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num.pcs = 8, nn.type = \"knn\", k = 20)</p><p>plotReducedDimension(cellrouter, assay.type = \"ST\", reduction.type = \"tsne\", annotation = \"population\", annotation.color = \"colors\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dotsize = 1.5, showlabels = TRUE, labelsize = 5, convex = FALSE)</p><p>plotReducedDimension(cellrouter, assay.type = \"ST\", reduction.type = \"umap\", annotation = \"population\", annotation.color = 'colors',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dotsize = 1.5, showlabels = TRUE, labelsize = 5, convex = FALSE)</p><p>&nbsp;</p><p>7. Calculate the Tumor-Specific Keratinocytes (TSK) and Fibrovascular cell gene-sets score.</p><p>&nbsp;</p><p>Used parameters the <em>scoreGeneSets</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- genes.list = character,&nbsp;defining the genes to score.</p><p>- bins = 25, defining the bin number to divide the expression data.</p><p>&nbsp;</p><p># Code:</p><p>TSK &lt;- c('FEZ1', 'IL24', 'INHBA', 'KCNMA', 'LAMC2', 'MAGEA4', 'MMP10', 'NT5E')</p><p>Fibrovascular &lt;- c('CAV1', 'CD93', 'ENG', 'FN1', 'ITGB1')</p><p>genelist &lt;- list(TSK = TSK, Fibrovascular = Fibrovascular)</p><p>cellrouter &lt;- scoreGeneSets(cellrouter, assay.type = \"ST\", genes.list = genelist, bins = 25)</p><p>plotSignatureScore(cellrouter, assay.type = 'ST', names(genelist), reduction.type='umap', threshold = 2, columns = 2, dotsize=0.5)</p><p>plotSpatialClusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"population\", colors.column = \"colors\", point.size = 1.7,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;annotate_centroids = FALSE, title = NULL)</p><p>plotSelectedClusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"population\", colors.column = \"colors\", point.size = 1.2,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;annotate_centroids = FALSE, title = NULL,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected_clusters = list(c(as.character(1:9))), facets = TRUE, num.cols = 3)</p><p>&nbsp;</p><p>8.&nbsp;Transfer cell type annotations from the sc-RNAseq atlas of cSCC generated by Ji et al. 2020 to clusters identified from the ST data.</p><p>&nbsp;</p><p># Code:</p><p>tmp &lt;- recode(as.character(cellrouter@assays$ST@sampTab$population),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"1\"=\"Fibrovascular-like\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"7\"='TSK',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"4\"=\"Lymphoid-like1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"5\"=\"Lymphoid-like2\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"6\"=\"Lymphoid-like2\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"5\"=\"Basal-like\", # !</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"8\"=\"KC-diff-like1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"9\"=\"KC-diff-like2\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"2\"=\"KC-diff-like3\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"3\"=\"KC-diff-like4\")</p><p>names(tmp) &lt;- rownames(cellrouter@assays$ST@sampTab)</p><p>df &lt;- data.frame(cluster = cellrouter@assays$ST@sampTab$population, celltype = tmp)</p><p>rownames(df) &lt;- rownames(cellrouter@assays$ST@sampTab)</p><p>cellrouter &lt;- addInfo(cellrouter, assay.type = \"ST\", sample.name = sample_names[[1]],</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metadata = df, colname = \"celltype\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metadata.column = \"celltype\")</p><p>plotReducedDimension(cellrouter, assay.type = 'ST',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reduction.type = 'umap', annotation=\"celltype\", annotation.color = 'celltype_color',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dotsize=1, showlabels = FALSE, labelsize=2.5, convex=FALSE)</p><p>plotSpatialClusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", colors.column = \"celltype_color\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.size = 2, title = NULL, annotate_centroids = FALSE)</p><p>TSK &lt;- c('FEZ1', 'IL24', 'LAMC2', 'MMP10', 'NT5E')</p><p>plotDRExpression(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reduction.type = \"umap\", dims.use = c(1, 2),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genelist = TSK[1:5], title = \"\", columns = 5, dotsize = 1, threshold = 5)</p><p>TSK &lt;- c('FEZ1', 'IL24', 'INHBA', 'KCNMA', 'LAMC2', 'MAGEA4', 'MMP10', 'NT5E')</p><p>gene_plots &lt;- plotSpatialExpression(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genes=c('TNC', 'MMP9'),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.size = 1.7)</p><p>gene_plots</p><p>&nbsp;</p><p><br></p><p>9. Identify cluster-specific gene signatures and marker genes.</p><p>&nbsp;</p><p>Used parameters the *findSignatures* function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- column = \"celltype\", defining the column with the groups in metadata.</p><p>- pos.only = TRUE, defining to get only the up-regulated genes.</p><p>- fc.threshold = 0.2, defining the fold change threshold.</p><p>&nbsp;</p><p># Code:</p><p>markers &lt;- findSignatures(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = \"celltype\", pos.only = TRUE, fc.threshold = 0.2); gc();</p><p>markers.top &lt;- markers %&gt;% group_by(population) %&gt;% top_n(10, fc)</p><p>markers.top &lt;- as.data.frame(markers.top)</p><p>plot &lt;- plotSignaturesHeatmap(cellrouter, assay.type = 'ST',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;markers.top, genes.show = as.vector(markers.top$gene),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column.ann = 'celltype', column.color&nbsp;= 'celltype_color',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num.cells = 700, threshold =&nbsp;2)</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p># **# CellComm in *cluster-cluster* communication**</p><p>&nbsp;</p><p>Next, we used CellComm to infer spatially-informed cell-cell interactions by calculating an interaction score that takes into account the number of ligand-receptor interactions co-expressed between cell types and their spatial distances on the tissue.</p><p>&nbsp;</p><p>&nbsp;10. Calculate the mean expression of ligands and receptors per cluster.</p><p>&nbsp;</p><p>Here we accessed a list of ligand-receptor interactions published by Robin Browaeys and collaborators in 2020 (NicheNet: modeling intercellular communication by linking ligands to target genes. Nat Methods 17, 159\u2013162 (2020)) and averaged the expression of each ligand/receptor as well as the average mean expression of these in each transcriptional cluster of the spots using the <em>computeValue</em>&nbsp;and <em>calculateObservedMean</em>&nbsp;functions.</p><p>&nbsp;</p><p>Used parameters the <em>computeValue</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- genelist = character, defining the genes to use in the analysis.</p><p>- column = \"celltype\", defining the column with the groups in metadata.</p><p>- fun = \"mean\", statistical function to summary the gene expression data.</p><p>&nbsp;</p><p>Used parameters the <em>population.pairing</em>&nbsp;function:</p><p>- mean.expr = mean.expr, object defined/calculated by the *computeValue* function.</p><p>- pairs = pairs, object with ligands/receptors pairs.</p><p>- ligands = ligands, defining the list of genes annotated as ligands.</p><p>- receptors = receptors, defining the list of genes annotated as receptors.</p><p>- threshold = 0.25, threshold to select the genes in the population according to their mean expression.</p><p>&nbsp;</p><p>Used parameters the <em>calculateObservedMean</em>&nbsp;function:</p><p>- mean.expr = mean.expr, object defined/calculated by the *computeValue* function.</p><p>- interactions = interactions, object defined/calculated by the *population.pairing* function.</p><p>&nbsp;</p><p>Used parameters the <em>findSignatures</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- column = \"celltype\", defining the column with the groups in metadata.</p><p>- pos.only = TRUE, defining to get only the up-regulated genes.</p><p>- fc.threshold = 0.2, defining the fold change threshold.</p><p>&nbsp;</p><p># Code:</p><p>lr_network = readRDS(url(\"https://zenodo.org/record/3260758/files/lr_network.rds\"))# from NicheNet</p><p>head(lr_network)</p><p>pairs &lt;- lr_network</p><p>pairs$Pair.Name &lt;- paste(pairs$from, pairs$to, sep = \"_\")</p><p>ligands &lt;- unique(lr_network$from)</p><p>ligands &lt;- intersect(ligands, rownames(cellrouter@assays$ST@ndata))</p><p>receptors &lt;- unique(lr_network$to)</p><p>receptors &lt;- intersect(receptors, rownames(cellrouter@assays$ST@ndata))</p><p>ligands.receptors &lt;- unique(c(ligands, receptors))</p><p>mean.expr &lt;- computeValue(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genelist = ligands.receptors, \"celltype\", fun = \"mean\"); gc();</p><p>interactions &lt;- population.pairing(mean.expr = mean.expr, pairs = pairs, ligands = ligands, receptors = receptors, threshold = 0.25)</p><p>interactions &lt;- calculateObservedMean(mean.expr = mean.expr, interactions = interactions)</p><p>head(interactions)</p><p>markers &lt;- findSignatures(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = \"celltype\", pos.only = TRUE, fc.threshold = 0.2); gc();</p><p>&nbsp;</p><p>&nbsp;</p><p>11. Calculate a null distribution of intracluster gene expression means.</p><p>&nbsp;</p><p>Next, CellComm shuffles cell state labels to calculate a null distribution of intracluster gene expression means and calculate an empirical <em>p</em>-value, which is used to filter out ligand-receptor interactions observed by chance. This algorithm predicts potential cluster-cluster interaction networks based on ligand-receptor pairings observed more often than expected by chance.</p><p>&nbsp;</p><p>Used parameters the <em>clusterPermutation</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- nPerm = 1000, defining the number of permutations.</p><p>- interactions = interactions, object defined/calculated by the *population.pairing* function.</p><p>- genelist = character, defining the genes to use in the analysis.</p><p>- cluster.label = \"celltype\", defining the column with the groups in metadata.</p><p>&nbsp;</p><p>Used parameters the <em>calculatePvalue</em>&nbsp;function:</p><p>- p = p, object defined/calculated by the *clusterPermutation* function.</p><p>- nPerm = 1000, defining the number of permutations.</p><p>- interactions = interactions, object defined/calculated by the *population.pairing* function.</p><p>&nbsp;</p><p># Code:</p><p>genelist &lt;- unique(c(interactions$ligand, interactions$receptor))</p><p>p &lt;- clusterPermutation(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genelist = genelist, interactions = interactions, cluster.label = \"celltype\", nPerm = 1000)</p><p>interactions.p &lt;- calculatePvalue(p, nPerm = 1000, interactions2 = interactions)</p><p>#saveRDS(interactions.p, file = paste(bd, \"/interactions_with_Pvalue_1000_cluster.rds\", sep = \"\"))</p><p>#interactions.p &lt;- readRDS(paste(basedir, \"/interactions_with_Pvalue_1000_cluster.rds\", sep = \"\"))</p><p>tmp &lt;- interactions.p[which(interactions.p$pvalue &lt; 0.01),]</p><p>head(tmp)</p><p>&nbsp;</p><p>12. Calculate a network based on the number of interactions (ligand/receptors), cluster centroids and distances between these clusters.</p><p>&nbsp;</p><p>Used parameters the <em>cellnetwork3</em>&nbsp;function:</p><p>- threshold = 5, defining the number of elements in the pair for it to be selected.</p><p>&nbsp;</p><p>Used parameters the <em>calculateCentroids</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- sample.name = \"Sample1\", defining the name of the sample.</p><p>- cluster.column = \"celltype\", defining the column with the groups in metadata.</p><p>- cluster.type = \"Cluster\", defining the column where the clusters are indicated. It could be either 'Cluster' or 'Subcluster'.</p><p>&nbsp;</p><p>Used parameters the <em>calculateDistanceMatrix</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- sample.name = \"Sample1\", defining the name of the sample.</p><p>- cluster.type = \"Cluster\", defining the column where the clusters are indicated. It could be either 'Cluster' or 'Subcluster'.</p><p>- spot_distance = 100, defining the distance between the center of the spots.</p><p>- normalize = FALSE, normalize the distances dividing by the total size of the tissue.</p><p>&nbsp;</p><p># Code:</p><p>my_matrix &lt;- interactionmatrix(tmp)</p><p>head(matrix)</p><p>my_graph &lt;- cellnetwork3(tmp, threshold = 5)</p><p>cellrouter &lt;- calculateCentroids(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", cluster.type = \"Cluster\")</p><p>cellrouter &lt;- calculateDistanceMatrix(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.type = \"Cluster\", spot_distance = 100, normalize = FALSE)</p><p>plots &lt;- predictCellInteractions(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.type = \"Cluster\", graph = my_graph, distance.threshold = 0.75)</p><p>gridExtra::grid.arrange(grobs = plots, ncol = 3)</p><p>plotSelectedClusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", colors.column = \"celltype_color\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected_clusters = list(c(\"TSK\", \"Fibrovascular-like\", \"KC-diff-like3\", \"Lymphoid-like2\", \"KC-diff-like4\")),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.size = 1.5, title = NULL, annotate_centroids = TRUE)</p><p>&nbsp;</p><p><br></p><p>13. Comparison with the original publication.</p><p>&nbsp;</p><p>We selected ligand-receptor pairs identified by CellComm based on the subset of ligands identified by the original publication, to make the analysis more comparable with the original publication. Specifically, we inferred ligand-receptor pairs between co-localized tumor-TME or TME-tumor interactions.</p><p>&nbsp;</p><p># Code:</p><p>x &lt;- tmp[which(tmp$ligand %in% c(\"CCL2\", \"CCL5\", \"CTGF\", \"CXCL10\", \"CXCL16\", \"MMP9\", \"PGF\", \"TGFB1\", \"TIMP1\", \"TNC\", \"VEGFA\")), ]</p><p># Tumor -&gt; Stroma</p><p>tumor &lt;- c(\"TSK_Fibrovascular-like\", 'TSK_Lymphoid-like2', \"TSK_KC-diff-like4\")</p><p>gene.pairs &lt;- plotPairDotplot(x, interactionList = tumor, num.pairs = 50)</p><p>head(gene.pairs$markers)</p><p>print(gene.pairs$plot)</p><p># Stroma -&gt; Tumor</p><p>TME &lt;- c(\"Fibrovascular-like_TSK\", 'Lymphoid-like2_TSK', \"KC-diff-like4_TSK\")</p><p>gene.pairs &lt;- plotPairDotplot(x, interactionList = TME, num.pairs = 50)</p><p>head(gene.pairs$markers)</p><p>print(gene.pairs$plot)</p><p>plotSelectedClusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", colors.column = \"celltype_color\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected_clusters = list(c(\"TSK\")), title = NULL, annotate_centroids = FALSE)</p><p>plots &lt;- plotSpatialExpression(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.size = 1.7, genes = c(\"LRP1\", \"MMP9\", \"SDC1\", \"TNC\"))</p><p>gridExtra::grid.arrange(grobs = plots, ncol = 3)</p><p>dotplot(object = cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genes.use = c(\"LRP1\", \"MMP9\", \"SDC1\", \"TNC\"), column = 'celltype', thr = 0.5)</p><p>&nbsp;</p><p>&nbsp;</p><p># **# CellComm in *subcluster-subcluster* communication**</p><p>&nbsp;</p><p>We used CellComm to subcluster spatially-resolved transcriptional clusters based on their spatial localization on the tissue, and performed a focused, spatially-resolved, high-resolution analysis of intercellular communication between TSKs, fibrovascular-like and lymphoid-like niche.</p><p>&nbsp;</p><p># Code:</p><p>cellrouter &lt;- findSubclusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", subcluster.column = \"Subpopulation\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method = \"mclust\")</p><p>plotSpatialSubclusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", subcluster.column = \"Subpopulation\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected_clusters = list(c(\"TSK\")),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title = NULL, annotate_centroids = FALSE)</p><p>&nbsp;</p><p>plotSpatialSubclusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", subcluster.column = \"Subpopulation\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected_clusters = list(c(\"Fibrovascular-like\")),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title = NULL, annotate_centroids = FALSE)</p><p>&nbsp;</p><p>plotSpatialSubclusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", subcluster.column = \"Subpopulation\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected_clusters = list(c(\"Lymphoid-like2\")),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title = NULL, annotate_centroids = FALSE)</p><p>&nbsp;</p><p>14.&nbsp;Calculate the mean expression of ligands and receptors per subcluster.</p><p>&nbsp;</p><p>Here we accessed a list of ligand-receptor interactions published by Robin Browaeys and collaborators in 2020 (NicheNet: modeling intercellular communication by linking ligands to target genes. Nat Methods 17, 159\u2013162 (2020)) and averaged the expression of each ligand/receptor as well as the mean mean expression of these in each transcriptional subclusters of the spots using the *computeValueSubclusters* and *calculateObservedMean* functions.</p><p>&nbsp;</p><p>Used parameters the *computeValueSubclusters* function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- genelist = character, defining the genes to use in the analysis.</p><p>- column = \"celltype\", defining the column with the groups in metadata.</p><p>- fun = \"mean\", statistical function to summary the gene expression data.</p><p>- clusters = character, defining the selected clusters.</p><p>&nbsp;</p><p>Used parameters the *population.pairing* function:</p><p>- mean.expr = mean.expr.sub, object defined/calculated by the *computeValueSubclusters* function.</p><p>- pairs = pairs, object with ligands/receptors pairs.</p><p>- ligands = ligands, defining the list of genes annotated as ligands.</p><p>- receptors = receptors, defining the list of genes annotated as receptors.</p><p>- threshold = 0.25, threshold to select the genes in the population according to their mean expression.</p><p>&nbsp;</p><p>Used parameters the *calculateObservedMean* function:</p><p>- mean.expr = mean.expr.sub, object defined/calculated by the *computeValueSubclusters* function.</p><p>- interactions = interactions, object defined/calculated by the *population.pairing* function.</p><p>&nbsp;</p><p>Used parameters the *findSignatures* function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- column = \"celltype\", defining the column with the groups in metadata.</p><p>- pos.only = TRUE, defining to get only the up-regulated genes.</p><p>- fc.threshold = 0.2, defining the fold change threshold.</p><p>&nbsp;</p><p>lr_network = readRDS(url(\"https://zenodo.org/record/3260758/files/lr_network.rds\"))# from NicheNet</p><p>head(lr_network)</p><p>pairs &lt;- lr_network</p><p>pairs$Pair.Name &lt;- paste(pairs$from, pairs$to, sep = \"_\")</p><p>ligands &lt;- unique(lr_network$from)</p><p>ligands &lt;- intersect(ligands, rownames(cellrouter@assays$ST@ndata))</p><p>receptors &lt;- unique(lr_network$to)</p><p>receptors &lt;- intersect(receptors, rownames(cellrouter@assays$ST@ndata))</p><p>ligand.receptors &lt;- unique(c(ligands, receptors))</p><p>mean.expr.sub &lt;- computeValueSubclusters(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genelist = ligand.receptors, column = \"celltype\", fun = \"mean\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters = c(\"TSK\", \"Fibrovascular-like\", \"Lymphoid-like2\")); gc();</p><p>interactions &lt;- population.pairing(mean.expr = mean.expr.sub, pairs, ligands = ligands, receptors = receptors, threshold = 0.25)</p><p>interactions &lt;- calculateObservedMean(interactions, mean.expr.sub)</p><p>head(interactions)</p><p>markers &lt;- findSignatures(cellrouter, assay.type = 'ST',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column = 'Subpopulation', pos.only = TRUE, fc.threshold = 0.2); gc();</p><p>&nbsp;</p><p><br></p><p>15. Calculate a null distribution of intrasubcluster gene expression means.</p><p>&nbsp;</p><p>Next, CellComm shuffles cell state labels to calculate a null distribution of intrasubcluster gene expression means and calculate an empirical <em>p</em>-value, which is used to filter out ligand-receptor interactions observed by chance. This algorithm predicts potential subcluster-subcluster interaction networks based on ligand-receptor pairings observed more often than expected by chance.</p><p>&nbsp;</p><p>Used parameters the <em>clusterPermutationSubcluster</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- nPerm = 1000, defining the number of permutations.</p><p>- interactions = interactions, object defined/calculated by the *population.pairing* function.</p><p>- genelist = character, defining the genes to use in the analysis.</p><p>- cluster.label = \"celltype\", defining the column with the groups in metadata.</p><p>- clusters = character, defining the selected clusters.</p><p>&nbsp;</p><p>Used parameters the <em>calculatePvalue</em>&nbsp;function:</p><p>- p = p, object defined/calculated by the <em>clusterPermutation</em>&nbsp;function.</p><p>- nPerm = 1000, defining the number of permutations.</p><p>- interactions = interactions, object defined/calculated by the *population.pairing* function.</p><p>&nbsp;</p><p>genelist &lt;- unique(c(interactions$ligand, interactions$receptor))</p><p>p &lt;- clusterPermutationSubcluster(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genelist = genelist, interactions = interactions, cluster.label = \"celltype\", nPerm = 1000,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters = c(\"TSK\", \"Fibrovascular-like\", \"Lymphoid-like2\"))</p><p>interactions.p &lt;- calculatePvalue(p, nPerm = 1000, interactions2 = interactions)</p><p>saveRDS(interactions.p, file = paste(bd, '/interactions_subcluster_with_Pvalue.rds', sep=\"\"))</p><p>tmp &lt;- interactions.p[which(interactions.p$pvalue &lt; 0.01), ]</p><p>head(tmp)</p><p>&nbsp;</p><p><br></p><p>16. Calculate a network based on the number of interactions (ligand/receptors), subcluster centroids and distances between these subclusters.</p><p>&nbsp;</p><p>Used parameters the <em>cellnetwork3</em>&nbsp;function:</p><p>- threshold = 5, defining the number of elements in the pair for it to be selected.</p><p>&nbsp;</p><p>Used parameters the <em>calculateCentroids</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- sample.name = \"Sample1\", defining the name of the sample.</p><p>- cluster.column = \"Subpopulation\", defining the column with the groups in metadata.</p><p>- cluster.type = \"Subcluster\", defining the column where the clusters are indicated. It could be either 'Cluster' or 'Subcluster'.</p><p>&nbsp;</p><p>Used parameters the <em>calculateDistanceMatrix</em>&nbsp;function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- sample.name = \"Sample1\", defining the name of the sample.</p><p>- cluster.type = \"Subcluster\", defining the column where the clusters are indicated. It could be either 'Cluster' or 'Subcluster'.</p><p>- spot_distance = 100, defining the distance between the center of the spots.</p><p>- normalize = FALSE, normalize the distances dividing by the total size of the tissue.</p><p>&nbsp;</p><p># Code:</p><p>my_matrix &lt;- interactionmatrix(tmp)</p><p>head(matrix)</p><p>my_graph &lt;- cellnetwork3(tmp, threshold = 5)</p><p>cellrouter &lt;- calculateCentroids(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"Subpopulation\", cluster.type = \"Subcluster\")</p><p>cellrouter &lt;- calculateDistanceMatrix(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.type = \"Subcluster\", spot_distance = 100, normalize = FALSE)</p><p>plots &lt;- predictCellInteractions(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.type = \"Subcluster\", graph = my_graph, distance.threshold = 0.35) # Cluster: distance.threshold = 0.75</p><p>gridExtra::grid.arrange(grobs = plots, ncol = 3)</p><p>plotSelectedClusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", colors.column = \"celltype_color\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected_clusters = list(c(\"Fibrovascular-like\", \"KC-diff-like3\", \"KC-diff-like4\", \"Lymphoid-like2\", \"TSK\")),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.size = 1.5, title=NULL, annotate_centroids=TRUE)</p><p>x &lt;- tmp[which(tmp$ligand %in% c(\"CCL2\", \"CCL5\", \"CTGF\", \"CXCL10\", \"CXCL16\", \"MMP9\", \"PGF\", \"TGFB1\", \"TIMP1\", \"TNC\", \"VEGFA\")), ]</p><p>&nbsp;</p><p>&nbsp;</p><p>17. Comparison with the original publication.</p><p>&nbsp;</p><p>We selected ligand-receptor pairs identified by CellComm based on the subset of ligands identified by the original publication, to make the analysis more comparable with the original publication. Specifically, we inferred ligand-receptor pairs between co-localized tumor-TME or TME-tumor interactions.</p><p>&nbsp;</p><p># Code:</p><p># Tumor -&gt; Stroma</p><p>tumor &lt;- c(\"TSK-1_Fibrovascular-like-4\", \"TSK-2_Fibrovascular-like-4\", \"TSK-3_Fibrovascular-like-4\", \"TSK-4_Fibrovascular-like-4\")</p><p>gene.pairs_01 &lt;- plotPairDotplot(x, interactionList = tumor, num.pairs = 50)</p><p>head(gene.pairs_01$markers)</p><p>plot(gene.pairs_01$plot)</p><p># Stroma -&gt; Tumor</p><p>TME &lt;- c(\"Fibrovascular-like-4_TSK-1\", \"Fibrovascular-like-4_TSK-2\", \"Fibrovascular-like-4_TSK-3\", \"Fibrovascular-like-4_TSK-4\")</p><p>gene.pairs_02 &lt;- plotPairDotplot(x, interactionList = TME, num.pairs = 50)</p><p>head(gene.pairs_02$markers)</p><p>plot(gene.pairs_02$plot)</p><p>plotSelectedClusters(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"celltype\", colors.column = \"celltype_color\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected_clusters = list(c(\"TSK\")), title = NULL, annotate_centroids = FALSE)</p><p>plots &lt;- plotSpatialExpression(cellrouter, assay.type = \"ST\", sample.name = \"Sample1\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.size = 1.7, genes = c(\"LRP1\", \"MMP9\", \"SDC1\", \"TNC\"),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cluster.column = \"Subpopulation\", selected_clusters = c(\"Fibrovascular-like-4\", \"TSK-1\"))</p><p>gridExtra::grid.arrange(grobs = plots, ncol = 3)</p><p>&nbsp;</p><p>&nbsp;</p><p>18. Predict a gene regulatory network (GRN) and create/define a protein-protein interaction network (PPI) for intracellular signaling.</p><p>&nbsp;</p><p>Then we identified transcription factors and transcription regulators based on gene ontology annotations and defined two igraph objects (networks) containing the GRN and the PPI network using the *buildGRN* and *createPPI* functions. The PPI network used data from the *iRefIndex* database.</p><p>&nbsp;</p><p>Used parameters the *buildGRN* function:</p><p>- assay.type = \"ST\", defining spatial transcriptomics analysis.</p><p>- species = \"Hs\", defining the species: *Hs* for *Homo Sapiens* or *Mm* for *Mus Musculus*.</p><p>- genes.use = character, defining the genes to to include in the gene regulatory network.</p><p>- blocksize = numeric, defining the size of the blocks in which genes will be scaled.</p><p>- zscore = 4, defining the threshold to identify putative regulatory interactions.</p><p>- filename = character, filename where the GRN data will be saved.</p><p>&nbsp;</p><p>Used parameters the *createPPI* function:</p><p>- filename = character, protein interaction data.</p><p>- expr = cellrouter@assays$ST@ndata, gene expression in each cell.</p><p>&nbsp;</p><p># Code:</p><p>filename &lt;- paste(bd, \"/GRN_P4R1.R\", sep = \"\")</p><p>grn.data &lt;- buildGRN(cellrouter, assay.type = \"ST\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;species = \"Hs\", genes.use = rownames(cellrouter@assays$ST@ndata), blocksize = nrow(cellrouter@assays$ST@ndata), zscore = 4,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename = filename)</p><p>filename &lt;- \"9606.mitab.05-29-2019_zcat.txt\"</p><p>inetwork &lt;- createPPI(filename = filename, expr = cellrouter@assays$ST@ndata)</p><p>filename &lt;- paste(bd, \"/9606.mitab.05-29-2019_zcat.R\", sep = \"\")</p><p>save(inetwork, file = filename)</p><p>&nbsp;</p><p><br></p><p>19. Create a weighted PPI network based on cell-type (cluster/subcluster-type) specific correlation coefficients.</p><p>&nbsp;</p><p>Used parameters the *cellnetworksPPI2* function:</p><p>- ppi = inetwork$network, defining the network as calculated by the *createPPI* function.</p><p>- expr = cellrouter@assays$ST@ndata, defining the gene expression in each cell/spot.</p><p>- samples = cellrouter@assays$ST@sampTab, defining the metadata information of the cells/spots.</p><p>- column = \"Subpopulation\", defining the column with the groups in metadata.</p><p>- corThr1 = 0.10, values smaller then corThr1 in the correlation matrix will be replaced by 0. Therefore, there will be no connections between the genes with value 0.</p><p>- corThr2 = 0.25, keep gene-gene interactions with correlation higher than the threshold.</p><p>- dir.prefix = \"\", defining the prefix of the directory where the files will be saved.</p><p>&nbsp;</p><p># Code:</p><p>#inetwork &lt;- get(load(paste(basedir, \"/9606.mitab.05-29-2019_zcat.R\", sep = \"\")))</p><p>corTables &lt;- cellnetworksPPI2(ppi = inetwork$network, expr = cellrouter@assays$ST@ndata,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;samples = cellrouter@assays$ST@sampTab, column = 'Subpopulation',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;corThr1 = 0.10, corThr2 = 0.25, dir.prefix = \"\")</p><p>grn.data &lt;- get(load(paste(bd, '/GRN_P4R1.R', sep=\"\"))) # !</p><p>&nbsp;</p><p>&nbsp;</p><p>20. Find paths between sources (receptors) and targets (transcription factors).</p><p>&nbsp;</p><p>We had filtered out 1 - statistically significant interactions between subclusters (using a null distribution of intrasubcluster gene expression means), 2 - ligands identified by the original publication (*CCL2*, *CCL5*, *CTGF*, *CXCL10*, *CXCL16*, *MMP9*, *PGF*, *TGFB1*, *TIMP1*, *TNC*, *VEGFA*), 3 - interactions between tumor (TSK-1, -2, -3 and -4) and stroma (Fibrovascular-like-4). Now we define possible *sources* (receptors) and *targets/sinks* (all transcription factors in the expression data) of intracellular signaling. Then, we identify pathways connecting source and target populations using the *findpaths.simpleRJava* function.</p><p>Next, CellComm calculates an activity score for each receptor-to-regulator path based on the assumption that critically important downstream transcriptional regulators have their regulons (predicted target genes in our reconstructed gene regulatory network) enriched in cell/cluster/subcluster type-specific signatures, implicating the transcriptional regulator as a major determinant of cell/cluster/subcluster type identity. This computational approach allows CellComm to predict putative signaling pathways and downstream transcriptional networks without prior knowledge of pathway structure. We used the *summarize.flow* function to Preprocess the output of *findpaths.simpleRJava* to a format acceptable by the function *activeSignaling* which in turn is responsible for identifying the transcriptional regulators for which their predicted regulons are significantly enriched in cluster or cell type-specific gene signatures. The *rankpaths* function computes and ranks pathways from cell surface receptors to downstream transcriptional regulators based.</p><p>&nbsp;</p><p>Used parameters the <em>findpaths.simpleRJava</em>&nbsp;function:</p><p>- cellcomm = cellcomm, CellComm object.</p><p>- sources.targets = sts2Sreceptor[[interaction]], list of cell surface receptors and downstream transcriptional regulators.</p><p>- file = filename to save intermediary results.</p><p>- dir = subfolder to save intermediary results.</p><p>- maindir = basedir from which subfolders will be created.</p><p>&nbsp;</p><p>Used parameters the <em>summarize.flow</em>&nbsp;function:</p><p>- files = files, list of files pointing to flow networks containing raw output from <em>findpaths.SimpleRJava</em>&nbsp;function.</p><p>&nbsp;</p><p>Used parameters the <em>activeSignaling</em>&nbsp;function:</p><p>- data = cellrouter@assaysSST@ndata, normalized gene expression data.</p><p>- sampTab = cellrouter@assays$ST@sampTab, study metadata, containing a column identifying clusters or cell types.</p><p>- grn = grn, the gene regulatory network previously reconstructed from the gene expression data.</p><p>- markers = markers, result of running findSignatures. It is a table containing differential expression results.</p><p>- summary = summary, output of function summary.flow.</p><p>- fc = 0.2, fold change used as a node size parameter in igraph graph generated by CellComm and determine whether to show or not the label for that node.</p><p>&nbsp;</p><p>Used parameters the <em>rankpaths</em>&nbsp;function:</p><p>- summary = summary, the output of <em>summarize.flow</em>&nbsp;function.</p><p>- apathways = apathways$pathways, the output of <em>activeSignaling</em>&nbsp;function.</p><p>&nbsp;</p><p># Code:</p><p>tfs &lt;- intersect(grn.data$tfs, rownames(cellrouter@assays$ST@ndata))</p><p>x &lt;- rbind(gene.pairs_01$markers, gene.pairs_02$markers)</p><p>head(x, n = 3)</p><p>sts2 &lt;- list()</p><p>for(i in unique(x$celltypes)){</p><p>&nbsp;&nbsp;tmp &lt;- x[which(x$celltypes == i),]</p><p>&nbsp;&nbsp;rs &lt;- unique(tmp$receptor)</p><p>&nbsp;&nbsp;sts2[[\"receptor\"]][[i]]$sources &lt;- rs&nbsp;# receptors</p><p>&nbsp;&nbsp;sts2[[\"receptor\"]][[i]]$targets &lt;- tfs # TFs (all)</p><p>}</p><p># Example</p><p>#head(sts2$receptor$`TSK-1_Fibrovascular-like-4`)</p><p>wd_package &lt;- getwd()</p><p>setwd(wd_package)</p><p>maindir &lt;- paste0(wd_package, '')</p><p># tumor &lt;- c(\"TSK-1_Fibrovascular-like-4\", \"TSK-2_Fibrovascular-like-4\", \"TSK-3_Fibrovascular-like-4\", \"TSK-4_Fibrovascular-like-4\")</p><p># TME &lt;- c(\"Fibrovascular-like-4_TSK-1\", \"Fibrovascular-like-4_TSK-2\", \"Fibrovascular-like-4_TSK-3\", \"Fibrovascular-like-4_TSK-4\")</p><p>interactionList &lt;- c(tumor, TME)</p><p>cellcomm &lt;- CreateCellComm()</p><p>for(interaction in interactionList){</p><p>&nbsp;&nbsp;interaction &lt;- gsub(\" \", \".\", interaction)</p><p>&nbsp;&nbsp;print(interaction)</p><p>&nbsp;&nbsp;celltype &lt;- strsplit(interaction, split = \"[_]\")[[1]][2]</p><p>&nbsp;&nbsp;cat(\"Using \", celltype, \" coexpression network\\n\")</p><p>&nbsp;&nbsp;filename &lt;- paste(celltype, \".txt\", sep='')</p><p>&nbsp;&nbsp;dirname &lt;- gsub((\"[.]\"), \".\", interaction)</p><p>&nbsp;&nbsp;cellcomm &lt;- findpaths.simpleRJava(cellcomm, sources.targets = sts2$receptor[[interaction]], file = filename, dir = dirname, maindir = maindir)</p><p>}</p><p>files &lt;- list()</p><p>for(i in interactionList){</p><p>&nbsp;&nbsp;f &lt;- paste(strsplit(i, split = \"_\")[[1]][2], \".txt\", sep = \"\")</p><p>&nbsp;&nbsp;files[[i]] &lt;- f</p><p>}</p><p>summary &lt;- summarize.flow(files, prefix = \"\")</p><p>grn &lt;- grn.data$GRN_table</p><p>colnames(grn) &lt;- c(\"target\", \"reg\", \"zscore\", \"corr\")</p><p>sampTab &lt;- cellrouter@sampTab</p><p>apathways &lt;- activeSignaling(data = cellrouter@assays$ST@ndata, sampTab = cellrouter@assays$ST@sampTab, grn = grn, markers = markers, summary = summary, fc = 0.2)</p><p>npaths &lt;- rankpaths(summary, apathways$pathways)</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>options(repr.plot.width = 7, repr.plot.height = 7)</p><p>a1 &lt;- signaling2TF(npaths, num.pathways = 20, interaction = tumor[1])</p><p>a2 &lt;- signaling2TF(npaths, num.pathways = 20, interaction = tumor[2])</p><p>a3 &lt;- signaling2TF(npaths, num.pathways = 20, interaction = tumor[3])</p><p>a4 &lt;- signaling2TF(npaths, num.pathways = 20, interaction = tumor[4])</p><p>combined &lt;- do.call(rbind, list(a1$df, a2$df, a3$df, a4$df))</p><p>g &lt;- ggplot(combined, aes(path, interaction)) + geom_point(aes(colour=score, size=score)) + #geom_tile(aes(fill = score2)) +</p><p>&nbsp;&nbsp;scale_colour_gradientn(\"Activity score\",colours=c(\"midnightblue\",\"dodgerblue3\",\"white\",\"goldenrod1\",\"darkorange2\")) + theme_bw() +</p><p>&nbsp;&nbsp;xlab(\"\") + ylab(\"\") +</p><p>&nbsp;&nbsp;theme(legend.position=\"top\", axis.text.x = element_text(size=rel(1), angle=45, hjust=1),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;panel.grid.minor = element_blank(),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axis.ticks=element_blank(),#)+#,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;panel.border=element_rect(fill = NA, colour=alpha('black', 1),size=1)) +</p><p>&nbsp;&nbsp;guides(colour = guide_colourbar(title.position=\"top\", title.hjust = 0.5),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = guide_legend(title.position=\"top\", title.hjust = 0.5)) + coord_flip()</p><p>g</p><p>a5 &lt;- signaling2TF(npaths, num.pathways = 15, interaction = TME[1])</p><p>a6 &lt;- signaling2TF(npaths, num.pathways = 15, interaction = TME[2])</p><p>a7 &lt;- signaling2TF(npaths, num.pathways = 15, interaction = TME[3])</p><p>a8 &lt;- signaling2TF(npaths, num.pathways = 15, interaction = TME[4])</p><p>combined &lt;- do.call(rbind, list(a5$df, a6$df, a7$df, a8$df))</p><p>g &lt;- ggplot(combined, aes(path, interaction)) + geom_point(aes(colour=score, size=score)) + #geom_tile(aes(fill = score2)) +</p><p>&nbsp;&nbsp;scale_colour_gradientn(\"Activity score\",colours=c(\"midnightblue\",\"dodgerblue3\",\"white\",\"goldenrod1\",\"darkorange2\")) + theme_bw() +</p><p>&nbsp;&nbsp;xlab(\"\") + ylab(\"\") +</p><p>&nbsp;&nbsp;theme(legend.position=\"top\", axis.text.x = element_text(size=rel(1), angle=45, hjust=1),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;panel.grid.minor = element_blank(),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axis.ticks=element_blank(),#)+#,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;panel.border=element_rect(fill = NA, colour=alpha('black', 1),size=1)) +</p><p>&nbsp;&nbsp;guides(colour = guide_colourbar(title.position=\"top\", title.hjust = 0.5),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = guide_legend(title.position=\"top\", title.hjust = 0.5)) + coord_flip()</p><p>g</p>"
    },
    {
      "header": "Troubleshooting",
      "content": "<p>Step: 7</p><p>Problem: The function scoreGeneSets creates columns in the metadata table that, if run more than once, generates column names different from the desired one, with suffix \u201c.1\u201d, \u201c.2\u201d, etc.</p><p>Solution: If the function has been run more than once, it is suggested to delete the columns added in the metadata table.</p><p>&nbsp;</p><p>Step: 19</p><p>Problem: Networks with too many elements can cause java to crash.</p><p>Solution: Use higher values in the network trimming parameters, <em>corThr1</em>&nbsp;e <em>corThr2</em>.</p>"
    },
    {
      "header": "Time Taken",
      "content": "<p>Time end-to-end for a beginner user should be around 4 hours (the computation of the null distribution/empirical <em>p</em>&nbsp;is the most computationally demanding step and, consequently, takes longer).</p><p><br></p>"
    },
    {
      "header": "Anticipated Results",
      "content": ""
    },
    {
      "header": "References",
      "content": "<p>1. Ji, A. L. et al. Multimodal Analysis of Composition and Spatial Architecture in Human Squamous Cell Carcinoma. Cell. 182(2), 497-514 (2020).</p><p><br></p>"
    },
    {
      "header": "Acknowledgements",
      "content": "<p>This work was supported by the following grants from the National Institutes of Health (NIH): RC2DK120535 (GQD, TEN), U01HL134812 (GQD, TEN), R24DK092760 (GQD, TEN), R01DK098241 (TEN), F32DK122715, K01DK129409 (WWS). E.L.d.R would like to thank CAPES \u2013 Coordination for the Improvement of Higher Education Personnel, Brazil. C.K. was supported by a postdoctoral fellowship from the German Research Foundation (DFG; grant KU 3580/1-1).</p>"
    }
  ],
  "attributes": {
    "acceptedTermsAndConditions": true,
    "allowDirectSubmit": true,
    "archivedVersions": [],
    "articleType": "Method Article",
    "associatedPublications": [
      {
        "doi": "10.1038/s41559-022-01722-1",
        "date": "",
        "title": "",
        "authors": "",
        "journal": "",
        "logo": ""
      },
      {
        "doi": "10.1038/s41556-022-00884-1",
        "date": "",
        "title": "",
        "authors": "",
        "journal": "",
        "logo": ""
      }
    ],
    "authors": [
      {
        "id": 84342412,
        "identity": "eba80740-1043-4669-8074-1fbf7076fac4",
        "order_by": 0,
        "name": "Edroaldo Lummertz da Rocha",
        "email": "edroaldo.lummertz@ufsc.br",
        "orcid": "https://orcid.org/0000-0003-0537-4223",
        "institution": "Department of Microbiology, Immunology and Parasitology, Federal University of Santa Catarina, Florian\u00f3polis, SC, 88040-900, Brazil",
        "correspondingAuthor": true,
        "prefix": "",
        "firstName": "Edroaldo",
        "middleName": "Lummertz da",
        "lastName": "Rocha",
        "suffix": ""
      },
      {
        "id": 84342413,
        "identity": "46a6b7ea-ce2b-40a4-ab6d-016032614e53",
        "order_by": 1,
        "name": "Caroline Kubaczka",
        "email": "",
        "orcid": "",
        "institution": "Stem Cell Program, Boston Children's Hospital, Boston, MA 02115, USA; Division of Hematology/Oncology, Boston Children's Hospital and Dana Farber Cancer Institute, Boston, MA 02115, USA; Department of Biological Chemistry and Molecular Pharmacology, Harvard Medical School, Boston, MA 02115 USA",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Caroline",
        "middleName": "",
        "lastName": "Kubaczka",
        "suffix": ""
      },
      {
        "id": 84342414,
        "identity": "b980ef7b-e4df-4692-94f9-9d34b1b6e009",
        "order_by": 2,
        "name": "Wade W. Sugden",
        "email": "",
        "orcid": "",
        "institution": "Stem Cell Program, Boston Children's Hospital, Boston, MA 02115, USA; Division of Hematology/Oncology, Boston Children's Hospital and Dana Farber Cancer Institute, Boston, MA 02115, USA",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Wade",
        "middleName": "W.",
        "lastName": "Sugden",
        "suffix": ""
      },
      {
        "id": 84342415,
        "identity": "eef1ef25-2cc4-43f6-9ebb-7703460a32b1",
        "order_by": 3,
        "name": "Mohamad Najia",
        "email": "",
        "orcid": "",
        "institution": "Stem Cell Program, Boston Children's Hospital, Boston, MA 02115, USA; Division of Hematology/Oncology, Boston Children's Hospital and Dana Farber Cancer Institute, Boston, MA 02115, USA; Department of Biological Chemistry and Molecular Pharmacology, Harvard Medical School, Boston, MA 02115 USA; Broad Institute of MIT and Harvard, Cambridge, MA, 02142, USA; Harvard-MIT Health Sciences & Technology, Massachusetts Institute of Technology",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Mohamad",
        "middleName": "",
        "lastName": "Najia",
        "suffix": ""
      },
      {
        "id": 84342416,
        "identity": "9ed101c3-78ed-40ff-b462-fec287bf4c9d",
        "order_by": 4,
        "name": "Ran Jing",
        "email": "",
        "orcid": "",
        "institution": "Stem Cell Program, Boston Children's Hospital, Boston, MA 02115, USA; Division of Hematology/Oncology, Boston Children's Hospital and Dana Farber Cancer Institute, Boston, MA 02115, USA; Department of Biological Chemistry and Molecular Pharmacology, Harvard Medical School, Boston, MA 02115 USA",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Ran",
        "middleName": "",
        "lastName": "Jing",
        "suffix": ""
      },
      {
        "id": 84342417,
        "identity": "bb2ed625-286a-461b-9fa1-c954344c5356",
        "order_by": 5,
        "name": "Arianna Markel",
        "email": "",
        "orcid": "",
        "institution": "Stem Cell Program, Boston Children's Hospital, Boston, MA 02115, USA; Division of Hematology/Oncology, Boston Children's Hospital and Dana Farber Cancer Institute, Boston, MA 02115, USA; Department of Biological Chemistry and Molecular Pharmacology, Harvard Medical School, Boston, MA 02115 USA",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Arianna",
        "middleName": "",
        "lastName": "Markel",
        "suffix": ""
      },
      {
        "id": 84342418,
        "identity": "b3605a0d-7568-4d44-9853-1381330e88dc",
        "order_by": 6,
        "name": "Zachary LeBlanc",
        "email": "",
        "orcid": "",
        "institution": "Stem Cell Program, Boston Children's Hospital, Boston, MA 02115, USA; Division of Hematology/Oncology, Boston Children's Hospital and Dana Farber Cancer Institute, Boston, MA 02115, USA",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Zachary",
        "middleName": "",
        "lastName": "LeBlanc",
        "suffix": ""
      },
      {
        "id": 84342419,
        "identity": "4778795d-3044-4455-a342-847238dcfe8c",
        "order_by": 7,
        "name": "Rafael dos Santos Peixoto",
        "email": "",
        "orcid": "",
        "institution": "Undergraduate program in Automation and Control Engineering, Federal University of Santa Catarina, Florian\u00f3polis, SC, 88040-900, Brazil",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Rafael",
        "middleName": "dos Santos",
        "lastName": "Peixoto",
        "suffix": ""
      },
      {
        "id": 84342420,
        "identity": "4c6d75ce-691d-481d-83a3-4910b8e953bd",
        "order_by": 8,
        "name": "Marcelo Falchetti",
        "email": "",
        "orcid": "",
        "institution": "Graduate Program of Pharmacology, Center for Biological Sciences, Federal University of Santa Catarina, Florian\u00f3polis, SC, 88040-900, Brazil",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Marcelo",
        "middleName": "",
        "lastName": "Falchetti",
        "suffix": ""
      },
      {
        "id": 84342421,
        "identity": "404267d5-7842-4712-8160-00e2fa17563e",
        "order_by": 9,
        "name": "James J. Collins",
        "email": "",
        "orcid": "",
        "institution": "Broad Institute of MIT and Harvard, Cambridge, MA, 02142, USA; Harvard-MIT Health Sciences & Technology, Massachusetts Institute of Technology; Wyss Institute for Biologically Inspired Engineering, Harvard University, Boston, MA, USA; Institute for Medical Engineering and Science, Massachusetts Institute of Technology, Cambridge, MA, USA; Department of Biological Engineering, Massachusetts Institute of Technology, Cambridge,  MA, USA; Synthetic Biology Center, Massachusetts Institute of Technology, Cambridge, MA, USA",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "James",
        "middleName": "J.",
        "lastName": "Collins",
        "suffix": ""
      },
      {
        "id": 84342422,
        "identity": "17feac74-31b4-4a49-ad27-c5f4a2be07e6",
        "order_by": 10,
        "name": "Trista E. North",
        "email": "",
        "orcid": "",
        "institution": "Stem Cell Program, Boston Children's Hospital, Boston, MA 02115, USA; Division of Hematology/Oncology, Boston Children's Hospital and Dana Farber Cancer Institute, Boston, MA 02115, USA",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "Trista",
        "middleName": "E.",
        "lastName": "North",
        "suffix": ""
      },
      {
        "id": 84342423,
        "identity": "76edc4de-5681-4879-91a3-c7769f7ff150",
        "order_by": 11,
        "name": "George Q. Daley",
        "email": "",
        "orcid": "",
        "institution": "Stem Cell Program, Boston Children's Hospital, Boston, MA 02115, USA; Division of Hematology/Oncology, Boston Children's Hospital and Dana Farber Cancer Institute, Boston, MA 02115, USA; Department of Biological Chemistry and Molecular Pharmacology, Harvard Medical School, Boston, MA 02115 USA",
        "correspondingAuthor": false,
        "prefix": "",
        "firstName": "George",
        "middleName": "Q.",
        "lastName": "Daley",
        "suffix": ""
      }
    ],
    "badges": [],
    "createdAt": "2022-02-16 16:04:12",
    "currentVersionCode": 1,
    "declarations": "",
    "doi": "10.21203/rs.3.pex-1843/v1",
    "doiUrl": "https://doi.org/10.21203/rs.3.pex-1843/v1",
    "draftVersion": [],
    "editorialEvents": [],
    "editorialNote": "",
    "failedWorkflow": [],
    "files": [
      {
        "id": 20278687,
        "identity": "fff423bc-746a-4a57-9ed3-b4be052673b0",
        "added_by": "auto",
        "created_at": "2022-04-13 08:05:00",
        "extension": "pdf",
        "order_by": 0,
        "title": "",
        "display": "",
        "copyAsset": false,
        "role": "manuscript-pdf",
        "size": 237314,
        "visible": true,
        "origin": "",
        "legend": "",
        "description": "",
        "filename": "manuscript.pdf",
        "url": "https://assets.researchsquare.com/files/pex-1843/v1/37b848b0-a460-4343-9ace-a43f138e9dcd.pdf"
      }
    ],
    "financialInterests": "",
    "fulltextSource": "",
    "fullText": "",
    "funders": [],
    "hasOptedInToPreprint": true,
    "hasPassedJournalQc": "",
    "hideJournal": true,
    "highlight": "",
    "institution": "",
    "isAuthorSuppliedPdf": false,
    "isDeskRejected": "",
    "isHiddenFromSearch": false,
    "isInQc": false,
    "isInWorkflow": false,
    "journal": {
      "display": true,
      "email": "protocol.exchange@nature.com",
      "identity": "protocol-exchange",
      "isNatureJournal": false,
      "hasQc": false,
      "allowDirectSubmit": true,
      "externalIdentity": "",
      "sideBox": "",
      "submissionUrl": "https://protocolexchange.researchsquare.com/submission",
      "title": "Protocol Exchange",
      "twitterHandle": ""
    },
    "keywords": "CellComm; scRNA-seq; spatial transcriptomics, cellular communication, intracellular signaling, Visium 10X",
    "license": {
      "name": "CC BY 4.0",
      "url": "https://creativecommons.org/licenses/by/4.0/"
    },
    "manuscriptAbstract": "<p>Intercellular communication is important for tissue development and homeostasis, and when dysregulated contributes to a multitude of pathobiological processes. Cells communicate with each other by several mechanisms, including direct cell-cell contacts between membrane-tethered ligands and receptors on the cell surface, through secreted molecules that bind their cognate receptor on the receiving cell, or alternative modalities such as exosomes. The study of cell-cell communication networks using single-cell genomic approaches is now under intensive investigation, and innovative algorithms to interpret the data, infer how cells interact and identify the downstream effectors of a putative binding of a ligand to its cognate receptor are critically needed. Here, we describe a protocol to run CellComm, a data-driven systems biology algorithm that integrates single-cell RNA-sequencing, protein interaction networks, and gene regulatory networks to infer which cells within a heterogeneous tissue are actively communicating, as well as their downstream transcriptional programs. When spatial transcriptomics data is available, CellComm additionally identifies spatially-resolved cell-cell interactions within the tissue.&nbsp;This protocol is associated with our Nature Cell Biology paper describing our algorithm: CellComm infers cellular crosstalk that drives hematopoietic stem and progenitor cell development.</p>",
    "manuscriptTitle": "Prediction of intercellular communication networks using CellComm",
    "msid": "",
    "msnumber": "",
    "nonDraftVersions": [
      {
        "code": 1,
        "date": "2022-04-13 08:04:56",
        "doi": "10.21203/rs.3.pex-1843/v1",
        "editorialEvents": [
          {
            "type": "communityComments",
            "content": 0
          }
        ],
        "status": "published",
        "journal": {
          "display": true,
          "email": "info@researchsquare.com",
          "identity": "researchsquare",
          "isNatureJournal": false,
          "hasQc": true,
          "allowDirectSubmit": true,
          "externalIdentity": "",
          "sideBox": "",
          "submissionUrl": "/submission",
          "title": "Research Square",
          "twitterHandle": "researchsquare"
        }
      }
    ],
    "origin": "",
    "ownerIdentity": "712e188d-fa49-469d-b387-3ce4a5d123cd",
    "owner": [],
    "postedDate": "April 13th, 2022",
    "published": true,
    "revision": "",
    "status": "posted",
    "subjectAreas": [],
    "tags": [],
    "versionOfRecord": [],
    "versionCreatedAt": "2022-04-13 08:04:56",
    "video": "",
    "vorDoi": "",
    "vorDoiUrl": "",
    "workflowStages": []
  },
  "checked": false
}